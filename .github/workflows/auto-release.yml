name: Auto Release on PR Merge
on:
  push:
    branches: [main, master]
  workflow_call:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    # Remove the pull_request condition since we're using push trigger
    steps:
      - uses: actions/checkout@v4  # Fixed typo
        with:
          fetch-tags: true
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch all tags
        run: |
          git fetch --tags --force

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if version file was updated in the last commit of the feature branch
          VERSION_FILE="VERSION"  

          # Use push event context instead of pull_request
          CURRENT_SHA="${{ github.sha }}"
          PREVIOUS_SHA="${{ github.event.before }}"
          TARGET_BRANCH="${{ github.ref_name }}"
          
          echo "Current SHA: $CURRENT_SHA"
          echo "Previous SHA: $PREVIOUS_SHA"
          echo "Target branch: $TARGET_BRANCH"

          # Check if version file was modified in this push
          if git diff --name-only $PREVIOUS_SHA $CURRENT_SHA | grep -q "^$VERSION_FILE$"; then
            echo "Version file was updated in this push"
            
            # Read version from the file
            if [ -f "$VERSION_FILE" ]; then
              FILE_VERSION=$(cat "$VERSION_FILE" | tr -d '[:space:]')
              # Ensure version starts with 'v'
              if [[ ! "$FILE_VERSION" =~ ^v ]]; then
                NEW_VERSION="v$FILE_VERSION"
              else
                NEW_VERSION="$FILE_VERSION"
              fi
              echo "Using version from file: $NEW_VERSION"
              
              # Check if this version from file already exists
              if git tag -l | grep -q "^$NEW_VERSION$"; then
                echo "Error: Tag '$NEW_VERSION' already exists!"
                echo "Please Update VERSION file with new version or remove/delete existing tag"
                exit 1
              fi
            else
              echo "Version file not found, falling back to incremental versioning"
              # Fall back to incremental versioning
              LATEST=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
              VERSION=${LATEST#v}
              IFS='.' read -ra PARTS <<< "$VERSION"
              MAJOR=${PARTS[0]:-0}
              MINOR=${PARTS[1]:-0}
              PATCH=${PARTS[2]:-0}
              NEW_VERSION="v$MAJOR.$MINOR.$((PATCH + 1))"
              echo "Incremental version: $NEW_VERSION"
            fi
          else
            echo "Version file was not updated, using incremental patch versioning"
            # Get latest tag and increment patch version
            LATEST=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            echo "Latest tag: $LATEST"
            
            VERSION=${LATEST#v}
            IFS='.' read -ra PARTS <<< "$VERSION"
            MAJOR=${PARTS[0]:-0}
            MINOR=${PARTS[1]:-0}
            PATCH=${PARTS[2]:-0}
            
            NEW_VERSION="v$MAJOR.$MINOR.$((PATCH + 1))"
            echo "Incremental version: $NEW_VERSION"
            
            # Check if this incremental version already exists
            if git tag -l | grep -q "^$NEW_VERSION$"; then
              echo "Error: Tag '$NEW_VERSION' already exists!"
              exit 1
            fi
          fi

          # Validate the final version format
          if [[ ! "$NEW_VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Invalid version format '$NEW_VERSION'. Expected format: v1.2.3"
            exit 1
          fi

          echo "Final version to release: $NEW_VERSION"

          # Create and push tag
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "$NEW_VERSION"
          git push origin "$NEW_VERSION"

          # Create release body
          RELEASE_BODY="Automated release for version $NEW_VERSION"

          # Create release using GitHub API
          curl -X POST \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d "{
              \"tag_name\": \"$NEW_VERSION\",
              \"target_commitish\": \"$CURRENT_SHA\",
              \"name\": \"Release $NEW_VERSION\",
              \"body\": \"$RELEASE_BODY\",
              \"draft\": false,
              \"prerelease\": false,
              \"make_latest\": \"true\"
            }"

          # Display new release tag 
          echo "Created GitHub release: $NEW_VERSION"
