name: Auto Release on PR Merge
on:
  # workflow_call:
  pull_request:
    types: [closed]
    branches: [main, master]
  # workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-tags: true
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch all tags
        run: |
          git fetch --tags --force

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if version file was updated in the last commit of the feature branch
          VERSION_FILE="VERSION"  

          # Get the head commit of the feature branch (before merge)
          FEATURE_HEAD="${{ github.event.pull_request.head.sha }}"
          echo "Feature branch head: $FEATURE_HEAD"

          # Check if version file was modified in the last commit of feature branch
          if git diff --name-only $FEATURE_HEAD~1 $FEATURE_HEAD | grep -q "^$VERSION_FILE$"; then
            echo "Version file was updated in the last commit of feature branch"
            
            # Read version from the file
            git checkout $FEATURE_HEAD
            if [ -f "$VERSION_FILE" ]; then
              FILE_VERSION=$(cat "$VERSION_FILE" | tr -d '[:space:]')
              # Ensure version starts with 'QA_v.'
              if [[ ! "$FILE_VERSION" =~ ^QA_v\. ]]; then
                NEW_VERSION="QA_v.$FILE_VERSION"
              else
                NEW_VERSION="$FILE_VERSION"
              fi
              echo "Using version from file: $NEW_VERSION"
              
              # Check if this version from file already exists
              if git tag -l | grep -q "^$NEW_VERSION$"; then
                echo "Error: Tag '$NEW_VERSION' already exists!"
                exit 1
              fi
            else
              echo "Version file not found, falling back to incremental versioning"
              # Fall back to incremental versioning
              LATEST=$(git describe --tags --abbrev=0 --match="QA_v.*" 2>/dev/null || echo "QA_v.0.0.0")
              VERSION=${LATEST#QA_v.}
              IFS='.' read -ra PARTS <<< "$VERSION"
              MAJOR=${PARTS[0]:-0}
              MINOR=${PARTS[1]:-0}
              PATCH=${PARTS[2]:-0}
              NEW_VERSION="QA_v.$MAJOR.$MINOR.$((PATCH + 1))"
              echo "Incremental version: $NEW_VERSION"
            fi
          else
            echo "Version file was not updated, using incremental patch versioning"
            # Get latest tag and increment patch version
            LATEST=$(git describe --tags --abbrev=0 --match="QA_v.*" 2>/dev/null || echo "QA_v.0.0.0")
            echo "Latest tag: $LATEST"
            
            VERSION=${LATEST#QA_v.}
            IFS='.' read -ra PARTS <<< "$VERSION"
            MAJOR=${PARTS[0]:-0}
            MINOR=${PARTS[1]:-0}
            PATCH=${PARTS[2]:-0}
            
            NEW_VERSION="QA_v.$MAJOR.$MINOR.$((PATCH + 1))"
            echo "Incremental version: $NEW_VERSION"
            
            # Check if this incremental version already exists
            if git tag -l | grep -q "^$NEW_VERSION$"; then
              echo "Error: Tag '$NEW_VERSION' already exists!"
              exit 1
            fi
          fi

          # Create and push tag
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "$NEW_VERSION"
          git push origin "$NEW_VERSION"

          # Validate the final version format
          if [[ ! "$NEW_VERSION" =~ ^QA_v\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Invalid version format '$NEW_VERSION'. Expected format: QA_v.1.2.3"
            exit 1
          fi

          # Switch back to the target branch
          TARGET_BRANCH="${{ github.event.pull_request.base.ref }}"
          git checkout $TARGET_BRANCH

          echo "Final version to release: $NEW_VERSION"
          COMMIT_SHA="${{ github.event.pull_request.merge_commit_sha }}"
          echo "Target branch: $TARGET_BRANCH"
          echo "Merge commit: $COMMIT_SHA"

          # Create release using GitHub API
          curl -X POST \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d "{
              \"tag_name\": \"$NEW_VERSION\",
              \"target_commitish\": \"$COMMIT_SHA\",
              \"name\": \"Release $NEW_VERSION\",
              \"body\": \"Auto-generated release for $NEW_VERSION\",
              \"draft\": false,
              \"prerelease\": false,
              \"make_latest\": \"true\"
            }"

          # Display new release tag 
          echo "Created GitHub release: $NEW_VERSION"
