name: Auto Release on PR Merge
on:
  #workflow_call
  push:
    branches: [main, master]
  #workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest


      - uses: actions/checkout@v4
        with:
          fetch-tags: true
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch all tags
        run: |
          git fetch --tags --force

      - name: Validate trigger conditions
        run: |
          echo "Checking workflow trigger conditions..."
          
          # Check if this is a valid push to main/master
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "✓ Triggered by push event"
            echo "Branch: ${{ github.ref_name }}"
            
            # Check if pushed to correct branch
            if [[ "${{ github.ref_name }}" == "main" || "${{ github.ref_name }}" == "master" ]]; then
              echo "✓ Push to main/master branch"
            else
              echo "✗ Push to incorrect branch: ${{ github.ref_name }}"
              echo "Expected: main or master"
              exit 1
            fi
            
            # Check if this is not the initial commit
            if [[ "${{ github.event.before }}" == "0000000000000000000000000000000000000000" ]]; then
              echo "⚠️  This is the initial commit - no previous commit to compare"
              echo "Will proceed with incremental versioning"
            else
              echo "✓ Valid commit with previous history"
            fi
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "✓ Triggered by manual workflow dispatch"
          else
            echo "✓ Triggered by workflow_call"
          fi

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if version file was updated in the last commit
          VERSION_FILE="VERSION"  


          # Get the head commit of the feature branch (before merge)
          FEATURE_HEAD="${{ github.event.pull_request.head.sha }}"
          echo "Feature branch head: $FEATURE_HEAD"

          # Check if version file was modified in the last commit of feature branch
          if git diff --name-only $FEATURE_HEAD~1 $FEATURE_HEAD | grep -q "^$VERSION_FILE$"; then
            echo "Version file was updated in the last commit of feature branch"
            
          # Use push event context
          CURRENT_SHA="${{ github.sha }}"
          PREVIOUS_SHA="${{ github.event.before }}"
          TARGET_BRANCH="${{ github.ref_name }}"
          
          echo "Current SHA: $CURRENT_SHA"
          echo "Previous SHA: $PREVIOUS_SHA"
          echo "Target branch: $TARGET_BRANCH"

          # Handle initial commit case
          if [[ "$PREVIOUS_SHA" == "0000000000000000000000000000000000000000" ]]; then
            echo "Initial commit detected - using incremental versioning"
            VERSION_FILE_UPDATED=false
          else
            # Check if version file was modified in this push
            if git diff --name-only $PREVIOUS_SHA $CURRENT_SHA | grep -q "^$VERSION_FILE$"; then
              echo "Version file was updated in this push"
              VERSION_FILE_UPDATED=true
            else
              echo "Version file was not updated in this push"
              VERSION_FILE_UPDATED=false
            fi
          fi

          if [[ "$VERSION_FILE_UPDATED" == "true"
              # Ensure version starts with 'QA_v.'
              if [[ ! "$FILE_VERSION" =~ ^QA_v\. ]]; then
                NEW_VERSION="QA_v.$FILE_VERSION"

              echo "Raw version from file: '$FILE_VERSION'"
              
              # Ensure version starts with 'v'
              if [[ ! "$FILE_VERSION" =~ ^v ]]; then
                NEW_VERSION="v$FILE_VERSIO
              else
                NEW_VERSION="$FILE_VERSION"
              fi
              echo "Using version from file: $NEW_VERSION"
              
              # Check if this version from file already exists
              if git tag -l | grep -q "^$NEW_VERSION$"; then
                echo "Error: Tag '$NEW_VERSION' already e

                echo "Please update VERSION file with new version or remove/delete existing tag"
                echo "Existing tags:"
                git tag -l | sort -V
                exit 1
              fi
            else
              echo "Version file not found, falling back to incremental versioning"

              # Fall back to incremental versioning
              LATEST=$(git describe --tags --abbrev=0 --match="QA_v.*" 2>/dev/null || echo "QA_v.0.0.0")
              VERSION=${LATEST#QA_v.}
              IFS='.' read -ra PARTS <<< "$VERSION"
              MAJOR=${PARTS[0]:-0}
              MINOR=${PARTS[1]:-0}
              PATCH=${PARTS[2]:-0}
              NEW_VERSION="QA_v.$MAJOR.$MINOR.$((PATCH + 1))"
              echo "Incremental version: $NEW_VERSION
              VERSION_FILE_UPDATED=false

            fi
          fi
          
          if [[ "$VERSION_FILE_UPDATED" == "false" ]]; then
            echo "Using incremental patch versioning"
            # Get latest tag and increment patch version
            LATEST=$(git describe --tags --abbrev=0 --match="QA_v.*" 2>/dev/null || echo "QA_v.0.0.0")
            echo "Latest tag: $LATEST"
            
            VERSION=${LATEST#QA_v.}
            IFS='.' read -ra PARTS <<< "$VERSION"
            MAJOR=${PARTS[0]:-0}
            MINOR=${PARTS[1]:-0}
            PATCH=${PARTS[2]:-0}
            
            NEW_VERSION="QA_v.$MAJOR.$MINOR.$((PATCH + 1))"
            echo "Incremental version: $NEW_VERSION"
            
            # Check if this incremental version already exists
            if git tag -l | grep -q "^$NEW_VERSION$"; then
              echo "Error: Tag '$NEW_VERSION' already exists!"
              echo "This might indicate a workflow run conflict or timing issue"
              echo "Existing tags:"
              git tag -l | sort -V
              exit 1
            fi
          fi

          # Create and push tag
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "Creating tag: $NEW_VERSION"
          git tag "$NEW_VERSION"
          
          echo "Pushing tag to origin..."
          git push origin "$NEW_VERSION"


          # Validate the final version format
          if [[ ! "$NEW_VERSION" =~ ^QA_v\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Invalid version format '$NEW_VERSION'. Expected format: QA_v.1.2.3"
            exit 1
          fi

          # Switch back to the target branch
          TARGET_BRANCH="${{ github.event.pull_request.base.ref }}"
          git checkout $TARGET_BRANCH

          echo "Final version to release: $NEW_VERSION"
          COMMIT_SHA="${{ github.event.pull_request.merge_commit_sha }}"
          echo "Target branch: $TARGET_BRANCH"
          echo "Merge commit: $COMMIT_SHA"


          echo "Creating GitHub release..."
          # Create release using GitHub API
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d "{
              \"tag_name\": \"$NEW_VERSION\",
              \"target_commitish\": \"$COMMIT_SHA\",
              \"name\": \"Release $NEW_VERSION\",
              \"body\": \"$RELEASE_BODY\",
              \"draft\": false,
              \"prerelease\": false,
              \"make_latest\": \"true\"
            }")

          echo "GitHub API Response:"
          echo "$RESPONSE"

          # Check if release was created successfully
          if echo "$RESPONSE" | grep -q '"id"'; then
            echo "✓ Successfully created GitHub release: $NEW_VERSION"
          else
            echo "✗ Failed to create GitHub release"
            echo "Response: $RESPONSE"
            exit 1
          fi
